---
title: "Bioinformatics pipeline summary"
subtitle: "Where we see the pipeline processes"
date: last-modified
author:
  - name: Adrien Taudi√®re
    url: https://adrientaudiere.github.io/bioinfo.starter/analysis/01_bioinformatics.qmd
    affiliation: IdEst
    affiliation-url: https://orcid.org/my-orcid?orcid=0000-0003-1088-1182
citation: true
# bibliography: bibliography.bib
# link-citations: true
---


```{r, message=FALSE, warning=FALSE}
library(knitr)
library(targets)
library(MiscMetabar)
library(patchwork)
here::i_am("analysis/01_bioinformatics.qmd")
source(here::here("R/styles.R"))
source(here::here("R/functions.R"))
```

```{r}
conflicted::conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(dplyr::rename)
```

# Carbon footprint
```{r, message=FALSE, warning=FALSE}
res_ga <- greenAlgoR::ga_targets(store = here::here("_targets/"))
library("emojifont")
ggvalue_box(
  round(res_ga$carbon_footprint_total_gCO2),
  "Carbon footprint (g)",
  icons = fontawesome(search_fontawesome("industry")[1]),
  alpha_icon = 0.7,
  colors = idest_pal$ligth_color_idest[[1]][[3]],
  color_icon = idest_pal$dark_color_idest[[1]][[5]],
  value_font_color = idest_pal$dark_color_idest[[1]][[5]],
  lab_font_color = idest_pal$dark_color_idest[[1]][[5]]
) +
  ggvalue_box(
    round(res_ga$energy_needed_kWh, 2),
    "Energy used (kWh)",
    icons = fontawesome(search_fontawesome("bolt")),
    alpha_icon = 0.7,
    colors = idest_pal$ligth_color_idest[[1]][[1]],
    color_icon = idest_pal$dark_color_idest[[1]][[2]],
    value_font_color = idest_pal$dark_color_idest[[1]][[2]],
    lab_font_color = idest_pal$dark_color_idest[[1]][[2]]
  )
```

# Summary of the bioinformatic pipeline

## Timeline and cpu usage
```{r, message=FALSE, warning=FALSE}
log_data <- autometric::log_read(
  here::here("data/data_final/autometric_log.txt"),
  units_time = "hours",
  units_memory = "gigabytes"
)

res <- NULL
for(pid_char in as.character(rev(unique(log_data$pid)))) {
  print(pid_char)
  print(paste0("NROW=", nrow(res)))
  for (phase_char in unique(log_data$phase)) {
    print(phase_char)
    if (sum(res$phase == phase_char) == 0) {
      ld <- log_data |>
        filter(phase == phase_char) |>
        filter(pid == pid_char)
      print(paste0("nrow_ld:",nrow(ld)))
      res <- bind_rows(ld, res)
    } else {
      print(paste0("nrow=", nrow(res)))
    }
  }
}

autom_p <- res |>
  filter(!grepl("conclude:", phase)) |>
  filter(!grepl("prepare:", phase)) |>
  filter(!grepl("__DEFAULT__", phase)) |>
  ggplot(aes(x = time, y = reorder(phase, dplyr::desc(time)), color = resident)) +
  geom_line(aes(linewidth = cpu)) +
  scale_color_viridis_b("Memory (Gb)", end = 0.9, direction = -1) +
  theme_idest() +
  xlab("Time (in hours)") +
  ylab("Targets")

autom_p + xlim(c(167, 174))

data_2 <- autom_p$data |> 
  group_by(phase) |>
  summarise(time=min(time), resident = mean(resident))

autom_p + geom_point(data = data_2, shape=3) + xlim(c(167, 174))

```


```{r}
d_pq <- clean_pq(tar_read("d_vs", store = here::here("_targets/")))
```

```{r}
summary_plot_pq(d_pq)
```

```{r Visualise target plan, out.width='80%'}
tar_glimpse(script = here::here("_targets.R"), 
            targets_only = TRUE, 
            callr_arguments = list(show = FALSE))
```

```{r}
tar_meta(store = here::here("_targets/"), targets_only = TRUE) |>
  dplyr::mutate(time = paste0(seconds %/% 3600, ":", seconds %/% 60, ":", floor(seconds %% 60))) |>
  dplyr::select(name, seconds, bytes, format, time) |>
  dplyr::mutate(Gb = round(bytes / 10^9, 2)) |>
  dplyr::arrange(desc(seconds), desc(bytes)) |>
  kable()
```


## Load phyloseq object from targets store

```{r}
d_pq <- tar_read("d_vs", store = here::here("_targets/"))
```

<hr/>

The {targets} package is at the core of this project. Please read the intro of the [user manual](https://books.ropensci.org/targets/) if you don't know {targets}.

::: {.cell .page-columns .page-full .column-screen .grey-section}
The {targets} package store ... *targets* in a folder and can load (`tar_load()`) and read (`tar_read`) object from this folder.
:::

## Sample data

```{r}
DT::datatable(d_pq@sam_data)
```

## Sequences, samples and clusters across the pipeline


::: {.panel-tabset .nav-pills}
## All samples together

```{r}
kable(tar_read(track_sequences_samples_clusters, store = here::here("_targets/")))
```

## Per samples

```{r}
#| message: false
#| results: asis
tab_samp <- tar_read(track_by_samples, store = here::here("_targets/"))

for (li in names(tab_samp)) {
  print(knitr::kable(tab_samp[[li]], caption = li, format = "html"))
  cat("\n<!-- -->\n\n")
}
```

:::

## Make krona files

```{r}
krona(clean_pq(d_pq, simplify_taxo = TRUE),
  paste0(here::here("data/data_final/"), "krona_unite.html"),
  name = "Unite"
)
krona(clean_pq(d_pq, simplify_taxo = TRUE),
  ranks = 8:14,
  paste0(here::here("data/data_final/"), "krona_eukaryome.html"), name = "Eukaryome"
)
merge_krona(c(
  paste0(here::here("data/data_final/"), "krona_unite.html"),
  paste0(here::here("data/data_final/"), "krona_eukaryome.html")
))
```

```{r}
krona(clean_pq(d_pq, simplify_taxo = TRUE),
  paste0(here::here("data/data_final/"), "krona_unite_taxa.html"),
  nb_seq = FALSE, name = "Unite"
)
krona(clean_pq(d_pq, simplify_taxo = TRUE),
  ranks = 8:14,
  paste0(here::here("data/data_final/"), "krona_eukaryome_taxa.html"),
  nb_seq = FALSE, name = "Eukaryome"
)
merge_krona(
  c(
    paste0(here::here("data/data_final/"), "krona_unite_taxa.html"),
    paste0(here::here("data/data_final/"), "krona_eukaryome_taxa.html")
  ),
  output = paste0(here::here("data/data_final/"), "mergeKrona_taxa.html")
)
```

## Save phyloseq object in R data object

```{r}
tar_load(d_asv, store = here::here("_targets/"))
tar_load(d_vs, store = here::here("_targets/"))
tar_load(d_vs_mumu, store = here::here("_targets/"))
save(d_asv, d_vs, d_vs_mumu,
  file = paste0(here::here("data/data_final/"), "phyloseq_object.Rdata")
)
```

### Save phyloseq object per project in R data object

```{r}
d_asv_Camila <- clean_pq(subset_samples(d_asv, Projet == "Camila"),
                         simplify_taxo = TRUE)
d_asv_DIVFUN <- clean_pq(subset_samples(d_asv, Projet == "DIVFUN"), 
                         simplify_taxo = TRUE)
d_asv_Cistaceae <- clean_pq(subset_samples(d_asv, Projet == "Cistaceae"), 
                            simplify_taxo = TRUE)
  
d_vs_Camila <- clean_pq(subset_samples(d_vs, Projet == "Camila"), 
                        simplify_taxo = TRUE)
d_vs_DIVFUN <- clean_pq(subset_samples(d_vs, Projet == "DIVFUN"), 
                        simplify_taxo = TRUE)
d_vs_Cistaceae <- clean_pq(subset_samples(d_vs, Projet == "Cistaceae"), 
                           simplify_taxo = TRUE)

dir.create(paste0(here::here("data/data_final/"), "Camila"))
dir.create(paste0(here::here("data/data_final/"), "DIVFUN"))
dir.create(paste0(here::here("data/data_final/"), "Cistaceae"))

save_pq(d_vs_Camila,
  path = paste0(here::here("data/data_final/Camila/"), 
                "otu_reclustering_vsearch")
)
save_pq(d_asv_Camila,
  path = paste0(here::here("data/data_final/Camila/"),
                "asv_dada2")
)

save_pq(d_vs_DIVFUN,
  path = paste0(here::here("data/data_final/DIVFUN/"),
                "otu_reclustering_vsearch")
)
save_pq(d_asv_DIVFUN,
  path = paste0(here::here("data/data_final/DIVFUN/"), 
                "asv_dada2")
)

save_pq(d_vs_Cistaceae,
  path = paste0(here::here("data/data_final/Cistaceae/"), 
                "otu_reclustering_vsearch")
)
save_pq(d_asv_Cistaceae,
  path = paste0(here::here("data/data_final/Cistaceae/"),
                "asv_dada2")
)

```

### Krona for Camila

```{r}
path_camila <- here::here("data/data_final/Camila/")
krona(d_vs_Camila,
  paste0(path_camila, "krona_unite_nb_seq.html"),
  name = "Nb_seq_Unite",
  ranks=c(1:7)
)
krona(d_vs_Camila,
      nb_seq = FALSE,
  paste0(path_camila, "krona_unite_nb_asv.html"),
  name = "Nb_ASV_Unite",
  ranks=c(1:7)
)
krona(d_vs_Camila,
  paste0(path_camila, "krona_eukaryome_nb_seq.html"),
  name = "Nb_seq_Euk",
  ranks=c(8:14)
)
krona(d_vs_Camila,
      nb_seq = FALSE,
  paste0(path_camila, "krona_eukaryome_nb_asv.html"),
  name = "Nb_ASV_Euk",
  ranks=c(8:14)
)
merge_krona(
  c(
   paste0(path_camila, "krona_unite_nb_asv.html"),
   paste0(path_camila, "krona_eukaryome_nb_asv.html"),
   paste0(path_camila, "krona_unite_nb_seq.html"),
   paste0(path_camila, "krona_eukaryome_nb_seq.html")
  ),
  output = paste0(path_camila, "krona_unite_eukaryome.html")
)
unlink(paste0(path_camila, "krona_unite_nb_asv.html"))
unlink(paste0(path_camila, "krona_unite_nb_seq.html"))
unlink(paste0(path_camila, "krona_eukaryome_nb_asv.html"))
unlink(paste0(path_camila, "krona_eukaryome_nb_seq.html"))
```

### Krona for DIVFUN

```{r}
path_divfun <- here::here("data/data_final/DIVFUN/")
krona(d_vs_DIVFUN,
  paste0(path_divfun, "krona_unite_nb_seq.html"),
  name = "Nb_seq_Unite",
  ranks=c(1:7)
)
krona(d_vs_DIVFUN,
      nb_seq = FALSE,
  paste0(path_divfun, "krona_unite_nb_asv.html"),
  name = "Nb_ASV_Unite",
  ranks=c(1:7)
)
krona(d_vs_DIVFUN,
  paste0(path_divfun, "krona_eukaryome_nb_seq.html"),
  name = "Nb_seq_Euk",
  ranks=c(8:14)
)
krona(d_vs_DIVFUN,
      nb_seq = FALSE,
  paste0(path_divfun, "krona_eukaryome_nb_asv.html"),
  name = "Nb_ASV_Euk",
  ranks=c(8:14)
)
merge_krona(
  c(
   paste0(path_divfun, "krona_unite_nb_asv.html"),
   paste0(path_divfun, "krona_eukaryome_nb_asv.html"),
   paste0(path_divfun, "krona_unite_nb_seq.html"),
   paste0(path_divfun, "krona_eukaryome_nb_seq.html")
  ),
  output = paste0(path_divfun, "krona_unite_eukaryome.html")
)
unlink(paste0(path_divfun, "krona_unite_nb_asv.html"))
unlink(paste0(path_divfun, "krona_unite_nb_seq.html"))
unlink(paste0(path_divfun, "krona_eukaryome_nb_asv.html"))
unlink(paste0(path_divfun, "krona_eukaryome_nb_seq.html"))
```


### Krona for Cistaceae

```{r}
path_cistaceae <- here::here("data/data_final/Cistaceae/")
krona(d_vs_Cistaceae,
  paste0(path_cistaceae, "krona_unite_nb_seq.html"),
  name = "Nb_seq_Unite",
  ranks=c(1:7)
)
krona(d_vs_Cistaceae,
      nb_seq = FALSE,
  paste0(path_cistaceae, "krona_unite_nb_asv.html"),
  name = "Nb_ASV_Unite",
  ranks=c(1:7)
)
krona(d_vs_Cistaceae,
  paste0(path_cistaceae, "krona_eukaryome_nb_seq.html"),
  name = "Nb_seq_Euk",
  ranks=c(8:14)
)
krona(d_vs_Cistaceae,
      nb_seq = FALSE,
  paste0(path_cistaceae, "krona_eukaryome_nb_asv.html"),
  name = "Nb_ASV_Euk",
  ranks=c(8:14)
)
merge_krona(
  c(
   paste0(path_cistaceae, "krona_unite_nb_asv.html"),
   paste0(path_cistaceae, "krona_eukaryome_nb_asv.html"),
   paste0(path_cistaceae, "krona_unite_nb_seq.html"),
   paste0(path_cistaceae, "krona_eukaryome_nb_seq.html")
  ),
  output = paste0(path_cistaceae, "krona_unite_eukaryome.html")
)
unlink(paste0(path_cistaceae, "krona_unite_nb_asv.html"))
unlink(paste0(path_cistaceae, "krona_unite_nb_seq.html"))
unlink(paste0(path_cistaceae, "krona_eukaryome_nb_asv.html"))
unlink(paste0(path_cistaceae, "krona_eukaryome_nb_seq.html"))
```



```{r}
krona(subset_taxa(d_asv, Genus_Eukaryome=="Apiotrichum"), 
      ranks=c(1:7),
      nb_seq= FALSE,
      file = paste0(here::here("data/data_final/"),
                    "Apiotrichum_fromEUK_uniteTax.html")
      )
```

{{< include _session_info.qmd >}}
